// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, PACKETS, Q3DS, dgram,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  dgram = require("dgram");

  EventEmitter = require('events').EventEmitter;

  PACKETS = {
    q3status: new Buffer(["0xFF", "0xFF", "0xFF", "0xFF", "0x67", "0x65", "0x74", "0x73", "0x74", "0x61", "0x74", "0x75", "0x73", "0x00"]),
    q3info: new Buffer(["0xFF", "0xFF", "0xFF", "0xFF", "0x67", "0x65", "0x74", "0x69", "0x6E", "0x66", "0x6F", "0x00"])
  };

  Q3DS = (function(_super) {

    __extends(Q3DS, _super);

    function Q3DS(ip, port, options) {
      var cb, _base, _ref,
        _this = this;
      if (options == null) {
        options = {};
      }
      this.onMsg = __bind(this.onMsg, this);

      if (this === global) {
        return new Q3DS(ip, port, options);
      }
      _ref = [ip, port, options], this.ip = _ref[0], this.port = _ref[1], this.options = _ref[2];
      this.client = dgram.createSocket('udp4');
      this.client.on('message', cb = function(msg, rinfo) {
        var fields, i, isnew, k, p, resps, split, v, _i, _len, _step;
        if (!msg) {
          return;
        }
        resps = msg.toString().split("\n");
        resps.shift();
        fields = resps.shift().split("\\");
        fields.shift();
        isnew = !_this.obj;
        if (isnew) {
          _this.obj = {};
        }
        for (i = _i = 0, _len = fields.length, _step = 2; _i < _len; i = _i += _step) {
          k = fields[i];
          v = fields[i + 1];
          if (isFinite(v)) {
            v = parseInt(v);
          }
          _this.obj[k] = v;
        }
        if (resps.length > 0) {
          _this.obj.players = (function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = resps.length; _j < _len1; _j++) {
              p = resps[_j];
              split = p.split(' ');
              if (!(split.length >= 3)) {
                continue;
              }
              _results.push({
                score: parseInt(split.shift()),
                ping: parseInt(split.shift()),
                name: split.join(' ')
              });
            }
            return _results;
          })();
        }
        if (!isnew) {
          _this.onMsg(_this.obj);
          return delete _this.obj;
        } else {
          return setTimeout(function() {
            return _this.send(PACKETS.q3status, cb);
          }, 1000);
        }
      });
      (_base = this.options).timeout || (_base.timeout = 10000);
    }

    Q3DS.prototype.send = function(packet, cb) {
      var _this = this;
      if (cb == null) {
        cb = function() {};
      }
      return this.client.send(packet, 0, packet.length, this.port, this.ip, function(err) {
        var msgcb, timeout;
        if (err) {
          return cb(err);
        } else {
          timeout = null;
          msgcb = function(msg) {
            clearTimeout(timeout);
            return cb(null, msg);
          };
          _this.on('message', msgcb);
          return timeout = setTimeout(function() {
            _this.removeListener('message', msgcb);
            return cb(new Error("Request timed out"));
          }, _this.options.timeout);
        }
      });
    };

    Q3DS.prototype.info = function(cb) {
      return this.send(PACKETS.q3info, cb);
    };

    Q3DS.prototype.onMsg = function(msg, rinfo) {
      var decoded, old, _new, _ref, _ref1;
      decoded = msg;
      _ref = {
        mapname: "map",
        clients: "numPlayers",
        sv_maxclients: "maxPlayers",
        hostname: "serverName"
      };
      for (old in _ref) {
        _new = _ref[old];
        decoded[_new] = decoded[old];
        delete decoded[old];
      }
      if ((_ref1 = decoded.numPlayers) == null) {
        decoded.numPlayers = 0;
      }
      return this.emit("message", decoded);
    };

    Q3DS.prototype.close = function() {
      return this.client.close();
    };

    return Q3DS;

  })(EventEmitter);

  module.exports = Q3DS;

}).call(this);
